# เอกสารประกอบโครงการ

## ภาพรวมโครงสร้างไฟล์

1. getRolePrompt.js
- ที่ตั้ง: /screens/option/
- วัตถุประสงค์: จัดการสถานการณ์บทสนทนา/ข้อความสำหรับสถานการณ์บทบาทสมมติต่างๆ
- ประกอบด้วยข้อความเริ่มต้นบทสนทนาสำหรับสถานการณ์ต่างๆ เช่น ร้านอาหาร, การสัมภาษณ์, โรงแรม ฯลฯ
- ใช้โดยคอมโพเนนต์ที่เกี่ยวข้องกับการแชทเพื่อกำหนดบริบทการสนทนา

2. package.json & package-lock.json
- ไฟล์การตั้งค่าระดับราก
- กำหนดการพึ่งพาและสคริปต์ของโครงการ
- จัดการโมดูล node และการควบคุมเวอร์ชัน
- ประกอบด้วยข้อมูลเมตาของโครงการและการตั้งค่าการสร้าง

3. babel.config.js
- ไฟล์การตั้งค่า Babel
- ตั้งค่ากฎการแปลง JavaScript
- กำหนดค่า preset-expo สำหรับการคอมไพล์ React Native

4. app.json
- ไฟล์การตั้งค่า Expo
- ประกอบด้วยข้อมูลเมตาของแอพ เช่น ชื่อ, เวอร์ชัน, ไอคอน
- กำหนดการตั้งค่าเฉพาะแพลตฟอร์ม (iOS/Android)
- จัดการการตั้งค่าการยืนยันตัวตน
- จัดการการเชื่อมโยงลึกและรูปแบบ URL

## แผนภาพความสัมพันธ์ของคอมโพเนนต์

```mermaid
graph TD
    A[app.json] --> B[babel.config.js]
    B --> C[package.json]
    
    D[getRolePrompt.js] --> E[คอมโพเนนต์แชท]
    E --> F[หน้าจอ]
    
    G[คอมโพเนนต์] --> H[หน้าจอ]
    H --> I[การนำทาง]
    I --> J[รากของแอพ]
    
    K[package.json] --> L[การพึ่งพา]
    L --> M[โมดูล Node]
    M --> J
```

การทำงานร่วมกันที่สำคัญ:

ลำดับการตั้งค่า:
- app.json กำหนดการตั้งค่าระดับแอพ
- babel.config.js จัดการการแปลงโค้ด
- package.json จัดการการพึ่งพาและสคริปต์

ลำดับการทำงานของฟีเจอร์:
- getRolePrompt.js จัดเตรียมบริบทการสนทนา
- คอมโพเนนต์แชทใช้ข้อความเหล่านี้
- หน้าจอรวมคอมโพเนนต์ต่างๆ เข้าด้วยกัน
- การนำทางจัดการการเปลี่ยนหน้าจอ
- รากของแอพประสานทุกอย่างเข้าด้วยกัน

ลำดับการสร้างและการเผยแพร่:
- สคริปต์ใน package.json เริ่มการสร้าง
- babel แปลงโค้ด
- Expo จัดการการสร้างเฉพาะแพลตฟอร์ม
- การพึ่งพาถูกแก้ไขผ่าน node_modules

หมายเหตุการพัฒนา:

การเพิ่มสถานการณ์บทบาทใหม่:
- อัปเดต getRolePrompt.js
- เพิ่มประเภทบทบาทใหม่
- กำหนดข้อความเริ่มต้นการสนทนา
- อัปเดตคอมโพเนนต์ที่เกี่ยวข้อง

สำหรับการเปลี่ยนแปลงการตั้งค่า:
- แก้ไข app.json สำหรับการเปลี่ยนแปลงระดับแอพ
- อัปเดต babel.config.js สำหรับกฎการแปลงโค้ด
- จัดการการพึ่งพาใน package.json

แนวทางปฏิบัติที่ดีที่สุด:
- จัดระเบียบและจัดหมวดหมู่ข้อความบทบาท
- รักษาขอบเขตคอมโพเนนต์ให้ชัดเจน
- เอกสารการพึ่งพาและข้อกำหนดเวอร์ชัน
- ทำตามรูปแบบการเขียนโค้ดที่สม่ำเสมอ

โครงสร้างโปรเจค:
    project/
├── screens/
│   ├── option/
│   │   └── getRolePrompt.js
│   └── ... หน้าจออื่นๆ
├── app.json
├── babel.config.js
├── package.json
└── package-lock.json